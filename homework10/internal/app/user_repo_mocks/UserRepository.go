// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import mock "github.com/stretchr/testify/mock"
import users "homework10/internal/model/users"

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

// AddUser provides a mock function with given fields: ctx, user
func (_m *UserRepository) AddUser(ctx context.Context, user users.User) (users.User, error) {
	ret := _m.Called(ctx, user)

	var r0 users.User
	if rf, ok := ret.Get(0).(func(context.Context, users.User) users.User); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(users.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, users.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUser provides a mock function with given fields: ctx, idToDelete
func (_m *UserRepository) DeleteUser(ctx context.Context, idToDelete int64) error {
	ret := _m.Called(ctx, idToDelete)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, idToDelete)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUserByID provides a mock function with given fields: ctx, id
func (_m *UserRepository) GetUserByID(ctx context.Context, id int64) (users.User, error) {
	ret := _m.Called(ctx, id)

	var r0 users.User
	if rf, ok := ret.Get(0).(func(context.Context, int64) users.User); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(users.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUserFields provides a mock function with given fields: ctx, idToUpdate, newUser
func (_m *UserRepository) UpdateUserFields(ctx context.Context, idToUpdate int64, newUser users.User) (users.User, error) {
	ret := _m.Called(ctx, idToUpdate, newUser)

	var r0 users.User
	if rf, ok := ret.Get(0).(func(context.Context, int64, users.User) users.User); ok {
		r0 = rf(ctx, idToUpdate, newUser)
	} else {
		r0 = ret.Get(0).(users.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, users.User) error); ok {
		r1 = rf(ctx, idToUpdate, newUser)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
