// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import ads "homework10/internal/model/ads"

import context "context"
import filter "homework10/internal/model/filter"
import mock "github.com/stretchr/testify/mock"

// AdRepository is an autogenerated mock type for the AdRepository type
type AdRepository struct {
	mock.Mock
}

// AddAd provides a mock function with given fields: ctx, ad
func (_m *AdRepository) AddAd(ctx context.Context, ad ads.Ad) (ads.Ad, error) {
	ret := _m.Called(ctx, ad)

	var r0 ads.Ad
	if rf, ok := ret.Get(0).(func(context.Context, ads.Ad) ads.Ad); ok {
		r0 = rf(ctx, ad)
	} else {
		r0 = ret.Get(0).(ads.Ad)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, ads.Ad) error); ok {
		r1 = rf(ctx, ad)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAd provides a mock function with given fields: ctx, idToDelete
func (_m *AdRepository) DeleteAd(ctx context.Context, idToDelete int64) error {
	ret := _m.Called(ctx, idToDelete)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, idToDelete)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAdByID provides a mock function with given fields: ctx, id
func (_m *AdRepository) GetAdByID(ctx context.Context, id int64) (ads.Ad, error) {
	ret := _m.Called(ctx, id)

	var r0 ads.Ad
	if rf, ok := ret.Get(0).(func(context.Context, int64) ads.Ad); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(ads.Ad)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAdsList provides a mock function with given fields: ctx, f
func (_m *AdRepository) GetAdsList(ctx context.Context, f filter.Filter) ([]ads.Ad, error) {
	ret := _m.Called(ctx, f)

	var r0 []ads.Ad
	if rf, ok := ret.Get(0).(func(context.Context, filter.Filter) []ads.Ad); ok {
		r0 = rf(ctx, f)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ads.Ad)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, filter.Filter) error); ok {
		r1 = rf(ctx, f)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchAds provides a mock function with given fields: ctx, pattern
func (_m *AdRepository) SearchAds(ctx context.Context, pattern string) ([]ads.Ad, error) {
	ret := _m.Called(ctx, pattern)

	var r0 []ads.Ad
	if rf, ok := ret.Get(0).(func(context.Context, string) []ads.Ad); ok {
		r0 = rf(ctx, pattern)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ads.Ad)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, pattern)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAdFields provides a mock function with given fields: ctx, idToUpdate, newAd
func (_m *AdRepository) UpdateAdFields(ctx context.Context, idToUpdate int64, newAd ads.Ad) (ads.Ad, error) {
	ret := _m.Called(ctx, idToUpdate, newAd)

	var r0 ads.Ad
	if rf, ok := ret.Get(0).(func(context.Context, int64, ads.Ad) ads.Ad); ok {
		r0 = rf(ctx, idToUpdate, newAd)
	} else {
		r0 = ret.Get(0).(ads.Ad)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, ads.Ad) error); ok {
		r1 = rf(ctx, idToUpdate, newAd)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
